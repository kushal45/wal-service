apiVersion: batch/v1
kind: Job
metadata:
  name: wal-service-migration
  labels:
    app.kubernetes.io/name: wal-service
    app.kubernetes.io/component: migration
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  # Allow the job to run multiple times (useful for development)
  completions: 1
  parallelism: 1
  backoffLimit: 3
  ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
  template:
    metadata:
      labels:
        app.kubernetes.io/name: wal-service
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      serviceAccountName: wal-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      initContainers:
      # Wait for PostgreSQL to be ready before running migrations
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgres-service -p 5432 -U wal_user; do
            echo "PostgreSQL is not ready yet. Waiting 5 seconds..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          value: "wal_password"
      containers:
      - name: migration
        image: localhost:6000/wal-service
        imagePullPolicy: IfNotPresent
        command: ['/bin/sh', '-c']
        args:
        - |
          echo "Starting database migration and seeding..."
          echo "Running migrations..."
          npm run migration:run
          echo "Migrations completed successfully!"
          
          echo "Running database seeding..."
          npm run db:seed
          echo "Database seeding completed successfully!"
          
          echo "Database initialization complete!"
        envFrom:
        - configMapRef:
            name: wal-service-config
        - secretRef:
            name: wal-service-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300